{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","state","input","option","changeHandler","event","setState","target","value","selectHandler","currentTarget","filterTodos","filteredTodos","todos","props","filter","todo","completed","title","includes","findCompleted","selectUser","this","console","log","action","type","placeholder","onChange","className","map","classNames","htmlFor","checked","readOnly","onClick","userId","id","React","Component","BASE_URL","getUser","fetch","then","response","json","CurrentUser","user","name","email","phone","clearUser","a","prevProps","App","selectedUserId","checkedTodo","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.69e7a525.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\n\ntype Props = {\n  todos: Todo[];\n  selectUser: (id: number) => void;\n};\n\ntype State = {\n  input: string;\n  option: string;\n};\n\nexport class TodoList extends React.Component<Props, State> {\n  state = {\n    input: '',\n    option: 'all',\n  };\n\n  changeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      input: event.target.value,\n    });\n  };\n\n  selectHandler = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    this.setState({\n      option: event.currentTarget.value,\n    });\n  };\n\n  filterTodos = () => {\n    const { todos } = this.props;\n    const { input, option } = this.state;\n    let filteredTodos;\n\n    switch (option) {\n      case 'active':\n        filteredTodos = todos.filter(todo => !todo.completed);\n        break;\n\n      case 'completed':\n        filteredTodos = todos.filter(todo => todo.completed);\n        break;\n\n      default:\n        filteredTodos = [...todos];\n    }\n\n    return filteredTodos.filter(({ title }) => (\n      title.includes(input)\n    ));\n  };\n\n  findCompleted = () => {\n    const { todos } = this.props;\n\n    return todos.filter(({ completed }) => (\n      completed\n    ));\n  };\n\n  render() {\n    const { selectUser } = this.props;\n    const { input, option } = this.state;\n\n    const filteredTodos = this.filterTodos();\n\n    // eslint-disable-next-line no-console\n    console.log(filteredTodos);\n\n    return (\n      <>\n        <form action=\"get\">\n          <input\n            type=\"text\"\n            placeholder=\"Enter a title\"\n            value={input}\n            onChange={this.changeHandler}\n          />\n          <select\n            value={option}\n            onChange={this.selectHandler}\n          >\n            <option value=\"all\">all</option>\n            <option value=\"active\">active</option>\n            <option value=\"completed\">completed</option>\n          </select>\n        </form>\n        <div className=\"TodoList\">\n          <h2>Todos:</h2>\n\n          <div className=\"TodoList__list-container\">\n            <ul className=\"TodoList__list\">\n              {filteredTodos.map((todo: Todo) => (\n                <li\n                  key={todo.id}\n                  className={classNames(\n                    'TodoList__item',\n                    {\n                      'TodoList__item--checked': todo.completed,\n                      'TodoList__item--unchecked': !todo.completed,\n                    },\n                  )}\n                >\n                  <label htmlFor=\"todo\">\n                    {todo.completed\n                      ? (\n                        <input type=\"checkbox\" checked readOnly />\n                      ) : (\n                        <input type=\"checkbox\" readOnly />\n                      )}\n                    <p>{todo.title}</p>\n                  </label>\n\n                  <button\n                    className=\"button TodoList__user-button\"\n                    type=\"button\"\n                    onClick={() => selectUser(todo.userId)}\n                  >\n                    {`User\\xa0#${todo.userId}`}\n                  </button>\n                </li>\n              ))}\n            </ul>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n","const BASE_URL = 'https://mate.academy/students-api';\n\nexport const getTodos = () => {\n  return fetch(`${BASE_URL}/todos`)\n    .then(response => response.json());\n};\n\nexport const getUser = (userId: number) => {\n  return fetch(`${BASE_URL}/users/${userId}`)\n    .then(response => response.json());\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api/api';\n\ntype Props = {\n  userId: number;\n};\n\ntype State = {\n  user: User;\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state = {\n    user: {\n      id: 0,\n      name: '',\n      email: '',\n      phone: '',\n    },\n  };\n\n  async componentDidMount() {\n    const user = await getUser(this.props.userId);\n\n    this.setState({\n      user: { ...user },\n    });\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps !== this.props) {\n      getUser(this.props.userId)\n        .then(user => (\n          this.setState({\n            user: { ...user },\n          })));\n    }\n  }\n\n  componentWillUnmount() {\n    this.clearUser();\n  }\n\n  clearUser = () => {\n    this.setState({\n      user: {\n        id: 0,\n        name: '',\n        email: '',\n        phone: '',\n      },\n    });\n  };\n\n  render() {\n    const {\n      id,\n      name,\n      email,\n      phone,\n    } = this.state.user;\n\n    return (\n      <>\n        {id > 0 && (\n          <>\n            <div className=\"CurrentUser\">\n              <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${id}`}</span></h2>\n\n              <h3 className=\"CurrentUser__name\">{name}</h3>\n              <p className=\"CurrentUser__email\">{email}</p>\n              <p className=\"CurrentUser__phone\">{phone}</p>\n            </div>\n            <button\n              type=\"button\"\n              className=\"CurrentUser__clear\"\n              onClick={this.clearUser}\n            >\n              Clear\n            </button>\n          </>\n        )}\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\ninterface State {\n  selectedUserId: number;\n  checkedTodo: boolean;\n  todos: Todo[];\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    checkedTodo: false,\n    todos: [],\n  };\n\n  async componentDidMount() {\n    const todos = await getTodos();\n\n    this.setState({\n      todos: [...todos],\n    });\n  }\n\n  selectUser = (id: number) => {\n    this.setState(state => ({\n      selectedUserId: id,\n      checkedTodo: !state.checkedTodo,\n    }));\n  };\n\n  render() {\n    const { selectedUserId, todos } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectUser={this.selectUser}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser userId={selectedUserId} />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}